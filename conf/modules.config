import static java.lang.Math.sqrt
import static java.lang.Math.round

def platform = params.platform

// Kraken memory allocation
def kraken2_db = new File("${params.kraken2_db}")
if (kraken2_db.isDirectory()) {
    process {
        withName: 'KRAKEN2' {
            memory = {
                def krakenDbSize = kraken2_db.directorySize()
                def allocSize = round(sqrt(krakenDbSize) + krakenDbSize)
                return "${allocSize} B"
            }
        }
    }
}

if (platform == 'illumina' && !params.skip_haplotype) {
    process {
        withName: 'HAPLOTYPING:JSON2YAML' {
        publishDir = [
                path: { "${params.outdir}/haplotypes" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

process {
    // Deinterleaving parameter: take every other read
    withName: 'SEQKIT_SPLIT2' {
        ext.args = '-p2'
    }

    // Reference genome download output
    withName: 'GENOME_DOWNLOAD:EDIRECT_EFETCH' {
        publishDir = [
            [
                path: { "${params.outdir}/reference" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : 'reference.fasta' }
            ]
        ]
    }

    withName: 'GENOME_DOWNLOAD:SAMTOOLS_FAIDX' {
        publishDir = [
            [
                path: { "${params.outdir}/reference" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : 'reference.fasta.fai' }
            ]
        ]
    }


    // Trimming: argument propogation
    withName: 'TRIMMOMATIC' {
        ext.clipFlag   = (params.trim_adapters && params.trim_mismatches && params.trim_pclip && params.trim_clip) ? "ILLUMINACLIP:/usr/local/share/trimmomatic-0.39-2/adapters/${params.trim_adapters}:${params.trim_mismatches}:${params.trim_pclip}:${params.trim_clip}" : ''
        ext.winFlag    = (params.trim_winsize && params.trim_winqual) ? "SLIDINGWINDOW:${params.trim_winsize}:${params.trim_winqual}" : ''
        ext.leadFlag   = (params.trim_leading) ? "LEADING:${params.trim_leading}" : ''
        ext.trailFlag  = (params.trim_trailing) ? "TRAILING:${params.trim_trailing}" : ''
        ext.cropFlag   = (params.trim_crop) ? "CROP:${params.trim_crop}" : ''
        ext.headFlag   = (params.trim_headcrop) ? "HEADCROP:${params.trim_headcrop}" : ''
        ext.minlenFlag = (params.trim_minlen) ? "MINLEN:${params.trim_minlen}" : ''
        ext.args = [ext.clipFlag, ext.winFlag, ext.leadFlag, ext.trailFlag, ext.cropFlag, ext.headFlag, ext.minlenFlag].join(' ')
    }
    withName: 'NANOFILT' {
        ext.minlenflag = ( params.trim_minlen > 0 )   ? "--length ${params.trim_minlen}"     : ''
        ext.maxlenflag = ( params.trim_maxlen > 0 )   ? "--maxlength ${params.trim_maxlen}"  : ''
        ext.qualflag   = ( params.trim_meanqual > 0 ) ? "--quality ${params.trim_meanqual}"  : ''
        ext.mingcflag  = ( params.trim_mingc > 0 )    ? "--minGC ${params.trim_mingc}"       : ''
        ext.maxgcflag  = ( params.trim_maxgc > 0 )    ? "--maxGC ${params.trim_maxgc}"       : ''
        ext.headflag   = ( params.trim_headcrop > 0 ) ? "--headcrop ${params.trim_headcrop}" : ''
        ext.tailflag   = ( params.trim_tailcrop > 0 ) ? "--tailcrop ${params.trim_tailcrop}" : ''
        ext.args = [ext.minlenflag, ext.maxlenflag, ext.qualflag, ext.mingcflag, ext.maxgcflag, ext.headflag, ext.tailflag].join(' ')
    }

    // Kraken reports output
    withName: 'KRAKEN2' {
        publishDir = [
            path: { "${params.outdir}/classification" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.endsWith('kreport') ? filename : null }
        ]
    }

    // Kraken filtering
    withName: 'KRAKENTOOLS_EXTRACT' {
        ext.args = '--include-children'
    }

    // General alignment settings: match sequencing platform, and output SAM format
    withName: '.*ALIGNMENT:MINIMAP2_ALIGN' {
        ext.args =
            """\
            ${(platform == 'nanopore') ? '-x map-ont' : (platform == 'illumina') ? '-x sr' : ''} \\
            -a \\
            --MD \\
            --eqx \
            """
    }

    // Visualizer alignment settings: output SAM
    withName: 'PRESENTATION:MINIMAP2_ALIGN' {
        ext.args = '-a'
    }

    // First alignment output
    withName: 'ALIGNMENT:SAMTOOLS_.*' {
        publishDir = [
            [
                path: { "${params.outdir}/alignment" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        ]
    }

    // Realignment output
    withName: 'CLOSEST_REFERENCE:CUSTOM_ALIGNMENT:SAMTOOLS_.*' {
        publishDir = [
            path: { "${params.outdir}/realignment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // Consensus sequences: match variant calling params and output
    withName: 'IVAR_CONSENSUS' {
        ext.args  = "-q ${params.variant_quality} -m ${params.variant_depth}"
        ext.args2 = "-aa -A -d 0 -Q 0"
        publishDir = [
            path: { "${params.outdir}/consensus" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.endsWith('fa') ? "${filename}sta" : null }
        ]
    }

    // BLAST settings
    withName: 'BLAST_MAKEBLASTDB' {
        ext.args = '-dbtype nucl'
    }
    withName: 'BLAST_BLASTN' {
        ext.args = '-num_alignments 1 -outfmt "6 saccver"'
    }

    // CliqueSNV parameter propogation
    withName: 'CLIQUESNV_.*' {
        ext.args = """\
                    -t ${params.haplotype_depth} \\
                    -tf ${params.haplotype_frequency} \\
                    -cm ${params.cliquesnv_method} \\
                    -fdf extended \\
                    -log \\
                    """
    }

    // CliqueSNV variant output
    withName: 'CLIQUESNV_ILLUMINAVC' {
        publishDir = [
            path: { "${params.outdir}/variants" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // CliqueSNV haplotype output
    withName: 'CLIQUESNV_ILLUMINA' {
        publishDir = [
            path: { "${params.outdir}/haplotypes" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.endsWith('fasta') ? filename : null }
        ]
    }

    // HapLink.jl variant parameter propgation and output
    withName: 'HAPLINK_VARIANTS' {
        ext.args = """\
            --quality ${params.variant_quality} \\
            --frequency ${params.variant_frequency} \\
            --position ${params.variant_position} \\
            --significance ${params.variant_significance} \\
            --depth ${params.variant_depth} \\
            """
        publishDir = [
            path: { "${params.outdir}/variants" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // HapLink.jl haplotype parameter propogation and output
    withName: 'HAPLINK_HAPLOTYPES' {
        ext.args = """\
            --significance ${params.haplotype_significance} \\
            --depth ${params.haplotype_depth} \\
            --method ${params.haplotype_method} \\
            --overlap-min ${params.haplotype_overlap_min} \\
            --overlap-max ${params.haplotype_overlap_max} \\
            --iterations ${params.haplotype_iterations} \\
            --seed ${params.seed} \\
        """
        publishDir = [
            path: { "${params.outdir}/haplotypes" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // HapLink.jl haplotype sequence output
    withName: 'HAPLINK_SEQUENCES' {
        publishDir = [
            path: { "${params.outdir}/haplotypes" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // MAFFT required parameter and output
    withName: 'MAFFT' {
        ext.args = "${params.mafft_method}"
        publishDir = [
            path: { "${params.outdir}/phylogenetics" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : 'alignment.fas' }
        ]
    }

    // RAxML-NG parameter propgation and output
    withName: 'RAXMLNG_PARSE' {
        ext.args = "--model ${params.phylogenetic_model}"
    }
    withName: 'RAXMLNG_SEARCH' {
        ext.args = "--seed ${params.seed} --outgroup ROOT"
    }
    withName: 'RAXMLNG_BOOTSTRAP' {
        ext.args = "--bs-trees ${params.phylogenetic_bootstraps} --bs-cutoff ${params.phylogenetic_bootstrap_cutoff} --seed ${params.seed}"
    }
    withName: 'RAXMLNG_SUPPORT' {
        ext.args = "--outgroup ROOT --prefix yavsap"
        publishDir = [
            path: { "${params.outdir}/phylogenetics" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : 'tree.nwk' }
        ]
    }

    // MultiQC output
    withName: 'MULTIQC' {
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('multiqc_report.html') ? filename : null }
        ]
    }

    // YAVSAP report
    withName: 'SEQUENCETABLE' {
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : 'index.html' }
        ]
    }
}
