/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/
import static java.lang.Math.sqrt
import static java.lang.Math.round

def platform = params.platform

// Kraken memory allocation
def kraken2_db = new File("${params.kraken2_db}")
if (kraken2_db.isDirectory()) {
    process {
        withName: 'KRAKEN2' {
            memory = {
                def krakenDbSize = kraken2_db.directorySize()
                def allocSize = round(sqrt(krakenDbSize) + krakenDbSize)
                return "${allocSize} B"
            }
        }
    }
}

if (platform == 'illumina') {
    process {
        // Trimming: argument propogation
        withName: 'TRIMMOMATIC' {
            ext.clipFlag = (params.trim_adapters && params.trim_mismatches && params.trim_pclip && params.trim_clip) ? "ILLUMINACLIP:/usr/local/share/trimmomatic-0.39-2/adapters/${params.trim_adapters}:${params.trim_mismatches}:${params.trim_pclip}:${params.trim_clip}" : ''
            ext.winFlag = (params.trim_winsize && params.trim_winqual) ? "SLIDINGWINDOW:${params.trim_winsize}:${params.trim_winqual}" : ''
            ext.leadFlag = (params.trim_leading) ? "LEADING:${params.trim_leading}" : ''
            ext.trailFlag = (params.trim_trailing) ? "TRAILING:${params.trim_trailing}" : ''
            ext.cropFlag = (params.trim_crop) ? "CROP:${params.trim_crop}" : ''
            ext.headFlag = (params.trim_headcrop) ? "HEADCROP:${params.trim_headcrop}" : ''
            ext.minlenFlag = (params.trim_minlen) ? "MINLEN:${params.trim_minlen}" : ''
            ext.args = [ext.clipFlag, ext.winFlag, ext.leadFlag, ext.trailFlag, ext.cropFlag, ext.headFlag, ext.minlenFlag].join(' ')
        }

        // CliqueSNV parameter propogation
        withName: 'CLIQUESNV_.*' {
            ext.args = """\
                        -t ${params.haplotype_depth} \\
                        -tf ${params.haplotype_frequency} \\
                        -cm ${params.cliquesnv_method} \\
                        -fdf extended \\
                        -log \\
                        """
        }

        // CliqueSNV consensus sequence output
        withName: 'CLIQUESNV_CONSENSUSILLUMINA' {
            publishDir = [
                path: { "${params.outdir}/consensus" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        // CliqueSNV variant output
        withName: 'CLIQUESNV_ILLUMINAVC' {
            publishDir = [
                path: { "${params.outdir}/variants" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        // CliqueSNV haplotype output
        withName: 'CLIQUESNV_ILLUMINA' {
            publishDir = [
                path: { "${params.outdir}/haplotypes" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.endsWith('fasta') ? filename : null }
            ]
        }
        withName: 'JSON2YAML' {
        publishDir = [
                path: { "${params.outdir}/haplotypes" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if (platform == 'nanopore') {
    process {
        withName: 'NANOFILT' {
            ext.minlenflag = ( params.trim_minlen > 0 ) ? "--length ${params.trim_minlen}" : ''
            ext.maxlenflag = ( params.trim_maxlen > 0 ) ? "--maxlength ${params.trim_maxlen}" : ''
            ext.qualflag = ( params.trim_meanqual > 0 ) ? "--quality ${params.trim_meanqual}" : ''
            ext.mingcflag = ( params.trim_mingc > 0 ) ? "--minGC ${params.trim_mingc}" : ''
            ext.maxgcflag = ( params.trim_maxgc > 0 ) ? "--maxGC ${params.trim_maxgc}" : ''
            ext.headflag = ( params.trim_headcrop > 0 ) ? "--headcrop ${params.trim_headcrop}" : ''
            ext.tailflag = ( params.trim_tailcrop > 0 ) ? "--tailcrop ${params.trim_tailcrop}" : ''
            ext.args = [ext.minlenflag, ext.maxlenflag, ext.qualflag, ext.mingcflag, ext.maxgcflag, ext.headflag, ext.tailflag].join(' ')
        }

        // HapLink.jl variant parameter propogation
        withName: 'HAPLINK_VARIANTS' {
            ext.args = """\
                --quality ${params.variant_quality} \\
                --frequency ${params.variant_frequency} \\
                --position ${params.variant_position} \\
                --significance ${params.variant_significance} \\
                --depth ${params.variant_depth} \\
                """
        }

        // HapLink.jl consensus sequence output
        withName: 'HAPLINK_CONSENSUS' {
            publishDir = [
                path: { "${params.outdir}/consensus" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        // HapLink.jl variant output
        withName: '.*VARIANTS:HAPLINK_VARIANTS' {
            publishDir = [
                path: { "${params.outdir}/variants" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        // HapLink.jl haplotype parameter propogation and output
        withName: 'HAPLINK_HAPLOTYPES' {
            ext.args = """\
                --significance ${params.haplotype_significance} \\
                --depth ${params.haplotype_depth} \\
                --method ${params.haplotype_method} \\
                --overlap-min ${params.haplotype_overlap_min} \\
                --overlap-max ${params.haplotype_overlap_max} \\
                --iterations ${params.haplotype_iterations} \\
                --seed ${params.seed} \\
            """
            publishDir = [
                path: { "${params.outdir}/haplotypes" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        // HapLink.jl haplotype sequence output
        withName: 'HAPLINK_SEQUENCES' {
            publishDir = [
                path: { "${params.outdir}/haplotypes" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

process {
    // Deinterleaving parameter: take every other read
    withName: 'SEQKIT_SPLIT2' {
        ext.args = '-p2'
    }

    // Reference genome download output
    withName: 'SEQRET_FASTA' {
        ext.prefix = 'download'
    }

    withName: '.*REFERENCE_DOWNLOAD:SAMTOOLS_FAIDX' {
        publishDir = [
            [
                path: { "${params.outdir}/reference" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : 'reference.fasta.fai' }
            ]
        ]
    }

    withName: 'SEQRET_GFF' {
        ext.args = '-feature'
        publishDir = [
            [
                path: { "${params.outdir}/reference" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : 'reference.gff' }
            ]
        ]
    }

    // Kraken reports output
    withName: 'KRAKEN2' {
        publishDir = [
            path: { "${params.outdir}/classification" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.endsWith('kreport') ? filename : null }
        ]
    }

    // Kraken filtering
    withName: 'KRAKENTOOLS_EXTRACT' {
        ext.args = '--include-children'
    }

    // Output Krona chart
    withName: 'KRONA_IMPORTTEXT' {
        ext.args = '-n root -u https://marbl.github.io/Krona'
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.endsWith('html') ? 'krona.html' : null }
        ]
    }

    // General alignment settings: match sequencing platform
    withName: 'MINIMAP2_.*ALIGN' {
        ext.args =
            """\
            ${(platform == 'nanopore') ? '-x map-ont' : (platform == 'illumina') ? '-x sr' : ''} \\
            --MD \\
            --eqx \
            """
    }

    // First alignment output
    withName: 'MINIMAP2_ALIGN' {
        publishDir = [
            [
                path: { "${params.outdir}/alignment" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        ]
    }
    withName: 'SAMTOOLS_INDEX' {
        publishDir = [
            [
                path: { "${params.outdir}/alignment" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        ]
    }

    // Realignment output
    withName: 'MINIMAP2_REALIGN' {
        publishDir = [
            path: { "${params.outdir}/realignment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'SAMTOOLS_REINDEX' {
        publishDir = [
            path: { "${params.outdir}/realignment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // BLAST settings
    withName: 'BLAST_MAKEBLASTDB' {
        ext.args = '-dbtype nucl'
    }
    withName: 'BLAST_BLASTN' {
        ext.args = '-num_alignments 1 -outfmt "6 saccver"'
    }

    // MAFFT required parameter and output
    withName: 'MAFFT' {
        ext.args = "${params.mafft_method}"
        publishDir = [
            path: { "${params.outdir}/phylogenetics" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : 'alignment.fas' }
        ]
    }

    // RAxML-NG parameter propgation and output
    withName: 'RAXMLNG_PARSE' {
        ext.args = "--model ${params.phylogenetic_model}"
    }
    withName: 'RAXMLNG_SEARCH' {
        ext.args = "--seed ${params.seed} --outgroup ROOT"
    }
    withName: 'RAXMLNG_BOOTSTRAP' {
        ext.args = "--bs-trees ${params.phylogenetic_bootstraps} --bs-cutoff ${params.phylogenetic_bootstrap_cutoff} --seed ${params.seed}"
    }
    withName: 'RAXMLNG_SUPPORT' {
        ext.args = "--outgroup ROOT --prefix yavsap"
        publishDir = [
            path: { "${params.outdir}/phylogenetics" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : 'tree.nwk' }
        ]
    }

    // MultiQC output
    withName: 'MULTIQC' {
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('multiqc_report.html') ? 'index.html' : null }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
}
