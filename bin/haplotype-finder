#!/bin/bash
# -*- mode: julia -*-
#=
julia --project="$(realpath "$(dirname "${BASH_SOURCE[0]}")")" -e 'using Pkg; Pkg.instantiate()'
exec julia --project="$(realpath "$(dirname "${BASH_SOURCE[0]}")")" "${BASH_SOURCE[0]}" "$@"
=#
# Searches for variant calls that can be verified using long NGS reads

# Import packages
using ArgParse
using Combinatorics
using CSV
using DataFrames
using Dates
using StructArrays
using XAM

# Declare arguments
s = ArgParseSettings()
@add_arg_table s begin
    "bamfile"
        help     = "BAM file containing reads with variants"
        required = true
        arg_type = String
    "ivarfile"
        help     = "tab-separated output file from iVar"
        required = true
        arg_type = String
    "haplotype_yaml"
        help     = "YAML results of all haplotypes"
        required = true
        arg_type = String
    "--significance", "-p"
        help     = "Χ-squared significance level above which to filter reads"
        required = false
        arg_type = Float64
        default  = 0.05
        range_tester = x -> (x >= 0) && (x <= 1)
    "--min_occurrences", "-m"
        help     = "Minimum number of times a haplotype must appear to be counted. Cannot be less than 1"
        required = false
        arg_type = Int64
        default  = 10
        range_tester = x -> x > 0
    "--max_variants", "-x"
        help     = "Maximum number of variants to consider in a single haplotype"
        required = false
        arg_type = Int64
        default  = 6
        range_tester = x -> (x >= 2) && (x < 24)
end

# Parse the arguments
args = parse_args(s)
bamfile = args["bamfile"]
varfile = args["ivarfile"]
outyaml = args["haplotype_yaml"]
hap_sig = args["significance"]
hap_min = args["min_occurrences"]
max_var = args["max_variants"]

# Bring in the function definitions
include("jev-function-lib.jl")

# Check if there are any variants
if length(readlines(varfile)) < 2
    touch(outyaml)
    exit(0)
end

# Read in the variant calls
variantdata = DataFrame(CSV.File(varfile))

# Parse the variants
variants = Variant.(eachrow(variantdata))

# Import reads from the BAM file
reader = open(BAM.Reader, bamfile)
bamreads = collect(reader)
close(reader)

# Hold any variants that have already been shown to exhibit linkage
linkedvariants = Variant[]

@info string("# of variants:", '\t', length(variants))

# Find the number of variants allowed to be in a haplotype
max_var = min(max_var, length(variants))

# Find all possible pairings of these variants
for i ∈ max_var:-1:2
    @info string("Now considering haplotypes of ", '\t', i, '\t', "variants.", '\t', Dates.now())

    # Take out any variants that have already been considered
    filteredvariants = filter(!v -> v ∈ linkedvariants, variants)

    # Find the combinations of variants that can be assembled into haplotypes
    variantcombos = combinations(filteredvariants, i)
    @info string('\t', length(variantcombos), '\t', "haplotype(s) possible")

    # Set up a rough progressbar
    print(string('\t', '\t', "progress: "))
    numcombos = length(variantcombos)
    j = 0
    lastpoint = 0
    endpoint = 57

    # Compute for each possible combo
    for variantcombo in variantcombos
        j += 1
        percentcomplete = j / numcombos
        if percentcomplete > lastpoint / endpoint
            lastpoint += 1
            print(".")
        end
        # Convert the combo into a haplotype
        expectedhaplotype = Haplotype(variantcombo)

        # Find the simulated counts
        haplotypecounts = findsimulatedoccurrences(expectedhaplotype, bamreads)

        # Check if this haplotype is significant
        linkstats = linkage(haplotypecounts.counts)
        if linkstats[2] <= hap_sig && last(haplotypecounts.counts) >= hap_min

            # Add the variant positions of this haplotype to the list of variants that can
            # be ignored
            push!(linkedvariants, cat(haplotypecounts.haplotype.mutations, dims=1)...)

            # Write this haplotype to the output file
            open(outyaml, "a") do f
                write(f, string(yamlize(haplotypecounts, reason="linkage")))
            end #do
        end #if
    end #for
    print("\n")
end #for

# Create haplotype objects for any non-linked variants
individualhaplotypes = Haplotype.(filter(!v -> v ∈ linkedvariants, variants))

# Quick and dirty writeout in yaml
open(outyaml, "a") do f
    write(f, string(yamlize.(Vector(individualhaplotypes), reason="individual")...))
end #do
