#!/bin/bash
# -*- mode: julia -*-
#=
julia --project="$(realpath "$(dirname "${BASH_SOURCE[0]}")")" -e 'using Pkg; Pkg.instantiate()'
exec julia --project="$(realpath "$(dirname "${BASH_SOURCE[0]}")")" "${BASH_SOURCE[0]}" "$@"
=#
# Searches for variant calls that can be verified using long NGS reads

# Import packages
using ArgParse
using Combinatorics
using CSV
using DataFrames
using XAM

# Declare arguments
s = ArgParseSettings()
@add_arg_table s begin
    "bamfile"
        help     = "BAM file containing reads with variants"
        required = true
        arg_type = String
    "ivarfile"
        help     = "tab-separated output file from iVar"
        required = true
        arg_type = String
    "haplotype_tsv"
        help     = "tab-separated results of multi-variant haplotype frequencies"
        required = true
        arg_type = String
    "haplotype_yaml"
        help     = "YAML results of all haplotypes"
        required = true
        arg_type = String
    "--significance", "-p"
        help     = "Χ-squared significance level above which to filter reads"
        required = false
        arg_type = Float64
        default  = 0.05
        range_tester = x -> (x >= 0) && (x <= 1)
    "--min_occurrences", "-m"
        help     = "Minimum number of times a haplotype must appear to be counted. Cannot be less than 1"
        required = false
        arg_type = Int64
        default  = 10
        range_tester = x -> x > 0
end

# Parse the arguments
args = parse_args(s)
bamfile = args["bamfile"]
varfile = args["ivarfile"]
outtsv  = args["haplotype_tsv"]
outyaml = args["haplotype_yaml"]
hap_sig = args["significance"]
hap_min = args["min_occurrences"]

# Bring in the function definitions
include("jev-function-lib.jl")

# Find the index file
baifile = string(bamfile, ".bai")
if !isfile(baifile)
    baifile = replace(bamfile, ".bam" => ".bai")
end
if !isfile(baifile)
    error("Could not find index file for BAM file")
end

# Check if there are any variants
if length(readlines(varfile)) < 2
    touch(outtsv)
    touch(outyaml)
    exit(0)
end

# Read in the variant calls
variantdata = DataFrame(CSV.File(varfile))

# Parse the variants
variants = Variant.(eachrow(variantdata))

# Find all possible pairings of these variants
variantpairs = Haplotype.(collect(combinations(variants, 2)))

# Find statistically equal frequency haplotypes
equalhaplotypes = filter(h -> prop_test(alternatedepth.(h.mutations), totaldepth.(h.mutations)) > 0.05, variantpairs)

# Import reads from the BAM file
reader = open(BAM.Reader, bamfile, index=baifile)

# Compute frequency stats
haplotypecounts = findoccurrences.(variantpairs, [reader])

# Cleanup the BAM stream
close(reader)

# Remove any haplotypes that occur so infrequently that linkage disequilibrium can't be calculated
filter!(h -> min(h.counts...) > hap_min, haplotypecounts)

# Remove any haplotypes that are not significant
filter!(h -> linkage(h.counts)[2] < hap_sig, haplotypecounts)

if length(haplotypecounts) > 0
    # Write the significant haplotypes out to a file for later processing
    hapdata = DataFrame(
        Chromosome1 = region.(mutations.(haplotype.(haplotypecounts))[1]),
        Position1   = position.(mutations.(haplotype.(haplotypecounts))[1]),
        Reference1  = referencebase.(mutations.(haplotype.(haplotypecounts))[1]),
        Alternate1  = alternatebase.(mutations.(haplotype.(haplotypecounts))[1]),
        Chromosome2 = region.(mutations.(haplotype.(haplotypecounts))[2]),
        Position2   = position.(mutations.(haplotype.(haplotypecounts))[2]),
        Reference2  = referencebase.(mutations.(haplotype.(haplotypecounts))[2]),
        Alternate2  = alternatebase.(mutations.(haplotype.(haplotypecounts))[2]),
        Ref_Ref     = ref_ref.(haplotypecounts),
        Ref_Alt     = ref_alt.(haplotypecounts),
        Alt_Ref     = alt_ref.(haplotypecounts),
        Alt_Alt     = alt_alt.(haplotypecounts),
        LD          = first.(linkage.(counts.(haplotypecounts))),
        p_val       = last.(linkage.(counts.(haplotypecounts)))
    )
    CSV.write(outtsv, hapdata, delim="\t")

    # Find all variant positions that exhibit linkage
    linkedvariants = unique(cat(mutations.(haplotypecounts)..., dims=1))
else
    touch(outtsv)
    linkedvariants = Haplotype[]
end

# Create haplotype objects for any non-linked variants
individualhaplotypes = Haplotype.(filter(!v -> v ∈ linkedvariants, variants))

allhaplotypes = unique([haplotype.(haplotypecounts); equalhaplotypes; individualhaplotypes])

# Quick and dirty writeout in yaml
open(outyaml, "w") do f
    for h in allhaplotypes
        write(f, "---\n")
        write(f, "mutations:\n")
        for v in h.mutations
            write(f, "  - chromosome: ")
            write(f, v.region)
            write(f, "\n")
            write(f, "    position: ")
            write(f, string(v.position))
            write(f, "\n")
            write(f, "    referencebase: ")
            write(f, string(v.referencebase))
            write(f, "\n")
            write(f, "    alternatebase: ")
            write(f, string(v.alternatebase))
            write(f, "\n")
        end #for
    end #for
end #do
