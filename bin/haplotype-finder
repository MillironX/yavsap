#!/bin/bash
# -*- mode: julia -*-
#=
julia --project="$(realpath "$(dirname "${BASH_SOURCE[0]}")")" -e 'using Pkg; Pkg.instantiate()'
exec julia --project="$(realpath "$(dirname "${BASH_SOURCE[0]}")")" "${BASH_SOURCE[0]}" "$@"
=#
# Searches for variant calls that can be verified using long NGS reads

# Import packages
using ArgParse
using Combinatorics
using CSV
using DataFrames
using XAM

# Declare arguments
s = ArgParseSettings()
@add_arg_table s begin
    "bamfile"
        help     = "BAM file containing reads with variants"
        required = true
        arg_type = String
    "ivarfile"
        help     = "tab-separated output file from iVar"
        required = true
        arg_type = String
    "haplotype_yaml"
        help     = "YAML results of all haplotypes"
        required = true
        arg_type = String
    "--significance", "-p"
        help     = "Χ-squared significance level above which to filter reads"
        required = false
        arg_type = Float64
        default  = 0.05
        range_tester = x -> (x >= 0) && (x <= 1)
    "--min_occurrences", "-m"
        help     = "Minimum number of times a haplotype must appear to be counted. Cannot be less than 1"
        required = false
        arg_type = Int64
        default  = 10
        range_tester = x -> x > 0
end

# Parse the arguments
args = parse_args(s)
bamfile = args["bamfile"]
varfile = args["ivarfile"]
outyaml = args["haplotype_yaml"]
hap_sig = args["significance"]
hap_min = args["min_occurrences"]

# Bring in the function definitions
include("yavsap-function-lib.jl")

# Check if there are any variants
if length(readlines(varfile)) < 2
    touch(outyaml)
    exit(0)
end

# Read in the variant calls
variantdata = DataFrame(CSV.File(varfile))

# Parse the variants
variants = Variant.(eachrow(variantdata))

# Find all possible pairings of these variants
variantpairs = Haplotype.(collect(combinations(variants)))
filter!(h -> length(h.mutations) > 1, variantpairs)

# Import reads from the BAM file
reader = open(BAM.Reader, bamfile)
bamreads = collect(reader)
close(reader)

# Compute frequency stats
haplotypecounts = findoccurrences.(variantpairs, [bamreads])

# Remove any haplotypes that occur so infrequently that linkage disequilibrium can't be calculated
filter!(h -> last(h.counts) > hap_min, haplotypecounts)

# Find all variant positions that exhibit linkage
linkedvariants = unique(cat(mutations.(haplotypecounts)..., dims=1))

# Create haplotype objects for any non-linked variants
individualhaplotypes = Haplotype.(filter(!v -> v ∈ linkedvariants, variants))
linkedhaplotypes = haplotype.(haplotypecounts)
filter!(!h -> h ∈ linkedhaplotypes, individualhaplotypes)

# Quick and dirty writeout in yaml
open(outyaml, "w") do f
    write(f, string(yamlize.(haplotypecounts, reason="linkage")...))
    write(f, string(yamlize.(individualhaplotypes, reason="individual")...))
end #do
