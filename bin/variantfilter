#!/bin/bash
# -*- mode: julia -*-
#=
julia --project="$(realpath "$(dirname "${BASH_SOURCE[0]}")")" -e 'using Pkg; Pkg.instantiate()'
exec julia --project="$(realpath "$(dirname "${BASH_SOURCE[0]}")")" "${BASH_SOURCE[0]}" "$@"
=#

# Import packages
using CSV
using DataFrames

# Bring in the function definitions
include("yavsap-function-lib.jl")

# Take in the filenames
variantfile = ARGS[1]
countsfile  = ARGS[2]
newvarfile  = ARGS[3]

# Check if variants were called
if length(readlines(variantfile)) < 2
    cp(variantfile, newvarfile)
    exit(0)
end

# Read in the statistics files
ivar = DataFrame(CSV.File(variantfile))
bamcounts = readlines(countsfile)

# Convert the data into a usable format
countsdata = bamcounts2bamdata(bamcounts)

# Remove indels from the iVar table
filter!(v -> first(v.ALT) != '-' && first(v.ALT) != '+', ivar)

# Remove annotation data
select!(ivar, Not([:GFF_FEATURE, :REF_CODON, :REF_AA, :ALT_CODON, :ALT_AA]))

# Remove any duplicates from the data
unique!(ivar)

# Remove read-end biases from the iVar table
filter!(v -> isdistributed(v, countsdata), ivar)

# Remove strand biases from the iVar table
filter!(v -> isunbiased(v, countsdata), ivar)

# Write the filtered variants
CSV.write(newvarfile, ivar, delim="\t")
