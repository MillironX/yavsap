#!/bin/bash
# -*- mode: julia -*-
#=
julia --project="$(realpath "$(dirname "${BASH_SOURCE[0]}")")" -e 'using Pkg; Pkg.instantiate()'
exec julia --project="$(realpath "$(dirname "${BASH_SOURCE[0]}")")" "${BASH_SOURCE[0]}" "$@"
=#
# Searches for variant calls that can be verified using long NGS reads

# Import packages
using BioAlignments
using BioSequences
using BioSymbols
using Combinatorics
using CSV
using DataFrames
using GenomicFeatures
using XAM

# Bring in the function definitions
include("jev-function-lib.jl")

# Parse the arguments
bamfile = ARGS[1]
varfile = ARGS[2]
outfile = ARGS[3]

# Find the index file
baifile = string(bamfile, ".bai")
if !isfile(baifile)
    baifile = replace(bamfile, ".bam" => ".bai")
    if !isfile(baifile)
        error("Could not find index file for BAM file")
    end
end

# Check if there are any variants
if length(readlines(varfile)) < 2
    touch(outfile)
    exit(0)
end

# Read in the variant calls
variantdata = DataFrame(CSV.File(varfile))

# Parse the variants
variants = Variant.(eachrow(variantdata))

# Find all possible pairings of these variants
variantpairs = Haplotype.(collect(combinations(variants, 2)))

# Import reads from the BAM file
reader = open(BAM.Reader, bamfile, index=baifile)

# Compute frequency stats
haplotypecounts = findoccurrences.(variantpairs, [reader])

# Cleanup the BAM stream
close(reader)

# Remove any haplotypes that occur so infrequently that linkage disequilibrium can't be calculated
filter!(h -> min(h.counts...) > 10, haplotypecounts)

# Remove any haplotypes that are not significant
filter!(h -> linkage(h.counts)[2] < 0.05, haplotypecounts)

if length(haplotypecounts) > 0
    # Write the significant haplotypes out to a file for later processing
    hapdata = DataFrame(
        Chromosome1 = region.(mutations.(haplotype.(haplotypecounts))[1]),
        Position1   = position.(mutations.(haplotype.(haplotypecounts))[1]),
        Reference1  = referencebase.(mutations.(haplotype.(haplotypecounts))[1]),
        Alternate1  = alternatebase.(mutations.(haplotype.(haplotypecounts))[1]),
        Chromosome2 = region.(mutations.(haplotype.(haplotypecounts))[2]),
        Position2   = position.(mutations.(haplotype.(haplotypecounts))[2]),
        Reference2  = referencebase.(mutations.(haplotype.(haplotypecounts))[2]),
        Alternate2  = alternatebase.(mutations.(haplotype.(haplotypecounts))[2]),
        Ref_Ref     = ref_ref.(haplotypecounts),
        Ref_Alt     = ref_alt.(haplotypecounts),
        Alt_Ref     = alt_ref.(haplotypecounts),
        Alt_Alt     = alt_alt.(haplotypecounts),
        LD          = first.(linkage.(counts.(haplotypecounts))),
        p_val       = last.(linkage.(counts.(haplotypecounts)))
    )
    CSV.write(outfile, hapdata, delim="\t")

    # Find all variant positions that exhibit linkage
    linkedvariants = unique(cat(mutations.(haplotypecounts)..., dims=1))
else
    touch(outfile)
    linkedvariants = Haplotype[]
end

# Create haplotype objects for any non-linked variants
individualhaplotypes = Haplotype.(filter(!v -> v âˆˆ linkedvariants, variants))

allhaplotypes = [haplotype.(haplotypecounts); individualhaplotypes]

# Quick and dirty writeout in yaml
open(string(outfile, ".out2"), "w") do f
    for h in allhaplotypes
        write(f, "---\n")
        write(f, "mutations:\n")
        for v in h.mutations
            write(f, "  - chromosome: ")
            write(f, v.region)
            write(f, "\n")
            write(f, "    position: ")
            write(f, string(v.position))
            write(f, "\n")
            write(f, "    referencebase: ")
            write(f, string(v.referencebase))
            write(f, "\n")
            write(f, "    alternatebase: ")
            write(f, string(v.alternatebase))
            write(f, "\n")
        end #for
    end #for
end #do
