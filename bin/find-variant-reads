#!/bin/bash
# -*- mode: julia -*-
#=
julia --project="$(realpath "$(dirname "${BASH_SOURCE[0]}")")" -e 'using Pkg; Pkg.instantiate()'
exec julia --project="$(realpath "$(dirname "${BASH_SOURCE[0]}")")" "${BASH_SOURCE[0]}" "$@"
=#
# Searches for variant calls that can be verified using long NGS reads

# Import packages
using BioAlignments
using BioSequences
using BioSymbols
using Combinatorics
using CSV
using DataFrames
using GenomicFeatures
using XAM

# Bring in the function definitions
include("jev-function-lib.jl")

# Parse the arguments
bamfile = ARGS[1]
varfile = ARGS[2]
outfile = ARGS[3]

# Find the index file
baifile = string(bamfile, ".bai")
if !isfile(baifile)
    baifile = replace(bamfile, ".bam" => ".bai")
    if !isfile(baifile)
        error("Could not find index file for BAM file")
    end
end

# Check if there are any variants
if length(readlines(varfile)) < 2
    touch(outfile)
    exit(0)
end

# Read in the variant calls
variantdata = DataFrame(CSV.File(varfile))

# Parse the variants
variants = Variant.(eachrow(variantdata))
# Find all possible pairings of these variants
variantcombos = collect(combinations(variants, 2))

# Import reads from the BAM file
reader = open(BAM.Reader, bamfile, index=baifile)

# Compute frequency stats
variantcombodata = findvariantlinkages(variantcombos, reader)

# Cleanup the BAM stream
close(reader)

CSV.write(outfile, variantcombodata)
