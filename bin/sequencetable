#!/usr/bin/env julia
using EzXML
using FASTX
using GFF3
using Kelpie
using Mustache
using YAML

haplotype_yaml = popfirst!(ARGS)
reference_fasta = popfirst!(ARGS)
reference_annotations = popfirst!(ARGS)
template_file = popfirst!(ARGS)
tool_meta_yaml = popfirst!(ARGS)
freeze_script = popfirst!(ARGS)
output_file = popfirst!(ARGS)

function match_cols(query, reference)
    cols = []
    for (seq, ref) in zip(query, reference)
        classes = [string(seq)]
        if seq != ref
            push!(classes, "variant")
        end #43
        push!(cols, td(seq; class=join(classes, " ")))
    end #for

    return cols
end #function

function strain_links(strain_string)
    links = []

    strain_list = split(strain_string, '|')

    for i in 1:length(strain_list)
        strain = popfirst!(strain_list)
        ncbi_link = "https://ncbi.nlm.nih.gov/nuccore/$strain"
        push!(links, a(strain; href=ncbi_link))

        if !isempty(strain_list)
            push!(links, span(" + "))
        end
    end

    return links
end #function

function sample_rows(sample, reference)
    sample_name = first(sample)
    sample_data = last(sample)
    strain_name = sample_data["strain_name"]
    strain_ncbi = sample_data["strain_ncbi"]
    consensus_sequence = sample_data["consensus_sequence"]
    haplotypes = sample_data["haplotypes"]

    num_haplotypes = length(haplotypes)

    consensus_row = tr(
        th(sample_name; rowspan=(num_haplotypes + 1)),
        td("Consensus"; colspan=2),
        td(strain_name),
        td(strain_links(strain_ncbi)...),
        match_cols(consensus_sequence, reference)...,
    )

    haplotype_rows = []

    for haplotype in haplotypes
        haplotype_name = first(first(haplotype))
        haplotype_data = last(first(haplotype))
        haplotype_frequency = haplotype_data["frequency"]
        haplotype_sequence = haplotype_data["sequence"]

        push!(
            haplotype_rows,
            tr(
                td(haplotype_name),
                td(em("$(round(haplotype_frequency * 100))%"); colspan=3),
                match_cols(haplotype_sequence, reference)...,
            ),
        )
    end #for

    return [consensus_row, haplotype_rows...]
end #function

# Read in the first (and hopefully only) record from the reference file
reference_reader = FASTA.Reader(open(reference_fasta, "r"))
reference_record = first(reference_reader)
if !isempty(reference_reader)
    @warn "Reference $reference_fasta contains more than one sequence. Only the first will be used."
end #if
close(reference_reader)
reference_name = FASTA.identifier(reference_record)
reference_sequence = string(FASTA.sequence(reference_record))

# Read in the records from the annotation file
annotation_reader = GFF3.Reader(open(reference_annotations, "r"))
segment_locs = UnitRange[]
for gff_record in annotation_reader
    if GFF3.source(gff_record) == "YAVSAP"
        push!(segment_locs, UnitRange(GFF3.seqstart(gff_record), GFF3.seqend(gff_record)))
    end #if
end #for
close(annotation_reader)

bs_bg = Dict(
    1 => "success",
    2 => "info",
    3 => "danger",
    4 => "warning",
    5 => "active",
)

segment_td = []
start_pos = 5
segment_num = 1
for location in segment_locs
    segment_length = last(location) - first(location)
    bg_index = segment_num
    while bg_index > 5
        bg_index -= 5
    end #while
    bg_class = bs_bg[bg_index]
    push!(segment_td, td("Segment $segment_num"; colspan=10, class=bg_class))
    for i in 1:(segment_length-9)
        push!(segment_td, td(""; class=bg_class))
    end #for

    global segment_num += 1
end #for
annotations_row = tr(td(""; colspan=5), segment_td...)

# Get the header
header_row = tr(
    th("Sample"; colspan=3),
    th("Genotype"; colspan=2),
    th("Sequence"; colspan=4),
    [td(i; colspan=5) for i in 5:5:length(reference_sequence)]...,
)

# Get the reference sequence row
reference_row = tr(
    th("Reference"; colspan=4),
    td(strain_links(reference_name)...),
    [td(base; class=base) for base in reference_sequence]...,
)

# Get rows for each sample
other_rows = []
for sample in YAML.load_file(haplotype_yaml)
    push!(other_rows, sample_rows(sample, reference_sequence)...)
end #for

# Plug it all into one big table
genome_table = table(
    thead(header_row), tbody(annotations_row, reference_row, other_rows...); class="table"
)

# Get the table as xml
io = IOBuffer()
print(io, genome_table)
table_xml = String(take!(io))

# Read in the tool metadata
tool_metadata = YAML.load_file(tool_meta_yaml)

# Create the mustache table
mustache_table = Dict(
    "kelpieseqtable" => table_xml,
    "jqueryfreezetable" => String(read(freeze_script)),
    "toolname" => tool_metadata["name"],
    "toolnamelower" => lowercase(tool_metadata["name"]),
    "tooldescription" => tool_metadata["description"],
    "toollink" => tool_metadata["url"],
    "doi" => tool_metadata["doi"],
)

# Output a rendered file
open(output_file, "w") do f
    write(f, render_from_file(template_file, mustache_table))
end #do
